<?xml version="1.0"?>
<project name="hqapi" default="compile" basedir=".">
    <property environment="ENV" />
    <property name="build.dir" location="build"/>
    <property name="dist.dir" location="${build.dir}/dist"/>
    <property name="javadoc.dir" location="${build.dir}/javadoc"/>

    <property file="hqu/hqapi1/plugin.properties"/>

    <path id="compile.classpath">
        <fileset dir="lib" includes="*.jar"/>
    </path>

    <path id="all.classpath">
        <fileset dir="lib" includes="*.jar"/>
        <path location="${build.dir}/classes" />
    </path>

    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask"
             classpathref="compile.classpath"/>

    <taskdef name="wjc"
             classname="org.jvnet.ws.wadl2java.WJCTask"
             classpathref="compile.classpath"/>

    <!-- Generate the Java XML bindings -->
    <target name="generate">

        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/src"/>
        <mkdir dir="${build.dir}/classes"/>

        <xjc destdir="${build.dir}/src" extension="true" removeOldOutput="yes"
             package="org.hyperic.hq.hqapi1.types">
            <schema dir="xsd" includes="HQApi1.xsd"/>
            <produces dir="${build.dir}/src/org/hyperic/hq/hqapi1/types"
                      includes="**/"/>
        </xjc>

        <mkdir dir="${build.dir}/src/org/hyperic/hq/hqapi1/wadl"/>

        <wjc description="xsd/HQApi1.wadl" package="org.hyperic.hq.hqapi1.wadl"
             autoSchemaPackage="false" target="build/src">
          <produces dir="build/src/org/hyperic/hq/hqapi1/wadl" includes="*.java"/>
        </wjc>

    </target>

    <target name="compile" depends="generate">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/src"/>
        <mkdir dir="${build.dir}/classes"/>

        <javac destdir="${build.dir}/classes"
               optimize="off"
               debug="on"
               target="1.5" source="1.5"
               classpathref="compile.classpath">
            <src>
                <path location="${build.dir}/src"/>
                <path location="src"/>
            </src>
        </javac>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <!-- Package a distribution -->
    <target name="dist" depends="compile,javadoc">

        <mkdir dir="${dist.dir}"/>

        <!-- Copy UI plugin -->
        <copy todir="${dist.dir}">
            <fileset dir="hqu">
                <include name="hqapi1/**"/>
            </fileset>
        </copy>

        <!-- Bundle client package in plugin public directory with all
             necessary jars, javadoc and xsds. -->
        <property name="client.dir" value="${build.dir}/hqapi1-${plugin.version}"/>

        <mkdir dir="${client.dir}"/>
        <mkdir dir="${client.dir}/lib"/>
        <copy todir="${client.dir}/lib">
            <fileset dir="${basedir}/lib">
                <include name="*.jar"/>
				<exclude name="*clover*.jar"/>
            </fileset>
        </copy>
        <copy todir="${client.dir}">
            <fileset dir="${build.dir}">
                <include name="javadoc/**"/>
            </fileset>            
        </copy>
        <jar file="${client.dir}/hqapi1-${plugin.version}.jar">
            <fileset dir="${build.dir}/classes">
                <include name="**"/>
                <exclude name="**/test/*.class"/>
                <!-- We don't include the wadl bindings -->
                <exclude name="**/wadl/*.class"/>
            </fileset>
        </jar>
        <mkdir dir="${client.dir}/xsd"/>
        <copy toDir="${client.dir}/xsd">
            <fileset dir="${basedir}/xsd">
                <include name="*.xsd"/>
                <include name="*.wadl"/>
            </fileset>
        </copy>
        <mkdir dir="${client.dir}/bin"/>
        <copy todir="${client.dir}/bin">
            <fileset dir="${basedir}/bin">
                <include name="*.sh"/>
                <include name="*.bat"/>
            </fileset>
        </copy>
        <chmod perm="+x" type="file">
            <fileset dir="${client.dir}/bin">
              <include name="*.sh"/>
              <include name="*.bat"/>
            </fileset>
        </chmod>

        <mkdir dir="${dist.dir}/hqapi1/public"/>
        <tar tarfile="${dist.dir}/hqapi1/public/hqapi1-${plugin.version}.tar.gz"
             longfile="gnu"
             compression="gzip">
            <tarfileset dir="${build.dir}" mode="755">
                <include name="hqapi1-${plugin.version}/**"/>
            </tarfileset>
        </tar>

        <!-- Include hqapi1.jar in plugin classpath -->
        <copy toDir="${dist.dir}/hqapi1/lib"
              file="${client.dir}/hqapi1-${plugin.version}.jar"/>

        <zip destfile="${dist.dir}/hqapi1-${plugin.version}.zip"
             basedir="${dist.dir}"/>

    </target>

    <!-- Run the full test suite -->
    <target name="test" depends="compile">
        <mkdir dir="${build.dir}/testresults"/>

        <property name="log" value="info"/>

        <junit printsummary="yes" fork="no"
               haltonfailure="no" showoutput="true">

            <sysproperty key="log" value="${log}"/>
			<sysproperty key="clover.distributed.coverage" value="ON"/>
			<sysproperty key="clover.server" value="true"/>
            <classpath refid="all.classpath"/>
            <formatter type="xml"/>
            
            <batchtest fork="no" todir="${build.dir}/testresults">
                <fileset dir="${build.dir}/classes">
                    <include name="**/*_test.class"/>
					<!-- temp exclude until we re-enable SSL -->
 					<exclude name="**/SSL_test.class"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${build.dir}/testresults">
            <fileset dir="${build.dir}/testresults">
                <include name="*.xml" />
            </fileset>
            <report todir="${build.dir}/testresults" />
        </junitreport>

    </target>

    <!-- Target to hot deploy the plugins into a running HQ instance -->
    <target name="deploy" depends="dist">
        <delete dir="${ENV.TOMCAT_HOME}/webapps/ROOT/hqu/hqapi1"/>
        <sleep seconds="2"/>
        <copy toDir="${ENV.TOMCAT_HOME}/webapps/ROOT/hqu/">
            <fileset dir="${dist.dir}">
                <include name="hqapi1/**"/>
            </fileset>
        </copy>
    </target>

    <target name="javadoc">

        <mkdir dir="${javadoc.dir}"/>

        <javadoc destdir="${javadoc.dir}"
                 private="false"
                 package="false"
                 protected="false"
                 version="true"
                 author="true"
                 maxmemory="256M"
                 use="true"
                 packagenames="org.hyperic.*"
                 excludepackagenames="org.hyperic.hq.hqapi1.test.*,org.hyperic.hq.hqapi1.examples.*,org.hyperic.hq.hqapi1.tools.*,org.hyperic.hq.hqapi1.wadl.*"
                 windowtitle="Hyperic HQ API">
            <sourcepath>
                <pathelement location="src"/>
                <pathelement location="${build.dir}/src"/>
            </sourcepath>
            <classpath>
                <path refid="all.classpath"/>
            </classpath>
            <doctitle><![CDATA[Hyperic HQ API Specification]]></doctitle>
            <bottom>
                <![CDATA[Copyright &#169; 2008 <a href="http://www.hyperic.com">Hyperic, Inc.</a>, All Rights Reserved.]]>
            </bottom>
        </javadoc>
        
    </target>

	<property name="clover.output.dir" value="${build.dir}/clover"/>
	 <property name="clover.staging.dir" value="${clover.output.dir}/staging"/>
	 <property name="clover.coverage" value="0%"/>
	 <property name="clover.enforce" value="false"/>

	  <target name="clover" depends="clover.pre, clover.instrument, clover.compile, test" description="Executes all tests resulting from a compilation of the test tree returning test coverage metrics."/>

	 <target name="clover.init">
	    <taskdef resource="cloverlib.xml" classpathref="compile.classpath"/>
	  </target>

	 <target name="clover.pre">
	    <delete dir="${clover.output.dir}" quiet="true"/>
	    <mkdir dir="${clover.output.dir}"/>
	 </target>

	<target name="clover.instrument" depends="clover.init">
	    <instrument input.dir="src" output.dir="${clover.staging.dir}"/>
	</target>

	  <target name="clover.compile" depends="generate">
	       <javac destdir="${build.dir}/classes"
	              optimize="off"
	              debug="on"
	              target="1.5" source="1.5"
	              classpathref="compile.classpath">
	           <src>
	               <path location="${build.dir}/src"/>
	               <path location="${clover.staging.dir}"/>
	           </src>
	       </javac>
	  </target>


		<macrodef name="instrument">
		    <attribute name="input.dir"/>
		    <attribute name="output.dir"/>
		    <sequential>
		      <clover-instr initstring="${clover.db.file}" destdir="@{output.dir}" source="1.5">
		        <fileset dir="@{input.dir}">
		          <include name="**/*.java"/>
		        </fileset>
		      </clover-instr>
		      <copy todir="@{output.dir}">
		        <fileset dir="@{input.dir}">
		          <exclude name="**/*.java"/>
		          <exclude name="*.java"/>
		        </fileset>
		      </copy>
		    </sequential>
		  </macrodef>

		<target name="clover.post" depends="clover.init">
		    <clover-report initstring="${clover.db.file}">
		      <current outfile="${clover.output.dir}/clover.xml">
		        <format type="xml"/> 
		      </current>
		    </clover-report>
		    <clover-report initstring="${clover.db.file}">
		      <current outfile="${clover.output.dir}/html">
		        <format type="html"/>
		      </current>
		    </clover-report>
		    <clover-report initstring="${clover.db.file}">
		      <current outfile="${clover.output.dir}/clover.pdf" summary="true">
		        <format type="pdf"/>
		      </current>
		    </clover-report>
		    <clover-check initstring="${clover.db.file}" target="${clover.coverage}" haltOnFailure="${clover.enforce}"/>
		  </target>

</project>
